name: Deploy Test Lambda For DCinside

on:
  pull_request:
    branches:
      - dev
    paths:
      - 'extract/dcinside/**'
  workflow_dispatch:

jobs:
  deploy-test-lambda:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.head.ref == 'extract/dcinside'

    permissions:
      id-token: write  # GitHub OIDC 사용을 위한 설정
      contents: read

    env:
      TARGET_DIR: "extract/dcinside"

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Configure AWS Credentials using OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ap-northeast-2 | \
        docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}

    - name: Build & Push Test Lambda Image
      run: |
        LAMBDA_NAME=$(basename $TARGET_DIR)
        TEST_LAMBDA_NAME="test-extract-$LAMBDA_NAME"
        IMAGE_URI="${{ secrets.AWS_ECR_REGISTRY }}/vroomcast/$TEST_LAMBDA_NAME:latest"

        echo "Building & Deploying Test Lambda: $TEST_LAMBDA_NAME"
        docker build --no-cache -t vroomcast/$TEST_LAMBDA_NAME $TARGET_DIR
        docker tag vroomcast/$TEST_LAMBDA_NAME:latest $IMAGE_URI
        docker push $IMAGE_URI

        echo "Check latest image has same digest with expected one"
        LOCAL_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE_URI | cut -d '@' -f 2)
        for i in {1..10}; do
          ECR_DIGEST=$(aws ecr batch-get-image --repository-name vroomcast/$TEST_LAMBDA_NAME --image-ids imageTag=latest --query 'images[0].imageId.imageDigest' --output text)
          if [ "$ECR_DIGEST" == "$LOCAL_DIGEST" ]; then
            echo "Image successfully pushed and verified in ECR!"
            break
          fi
          echo "ECR image not updated yet. Retrying in 3 seconds..."
          sleep 3
        done
        
        if [ "$ECR_DIGEST" != "$LOCAL_DIGEST" ]; then
          echo "ECR image digest does not match local digest! Exiting..."
          exit 1
        fi
        
        IMAGE_URI_WITH_DIGEST="${{ secrets.AWS_ECR_REGISTRY }}/vroomcast/$TEST_LAMBDA_NAME@${LOCAL_DIGEST}"
    
        echo "Creating or Updating Test Lambda: $TEST_LAMBDA_NAME"
        echo "Delete and Update Test Lambda: $TEST_LAMBDA_NAME"
        aws lambda delete-function --function-name $TEST_LAMBDA_NAME --region ap-northeast-2 || echo "No existing function to delete"
        aws lambda create-function \
          --function-name $TEST_LAMBDA_NAME \
          --package-type Image \
          --code ImageUri=$IMAGE_URI_WITH_DIGEST \
          --role ${{ secrets.AWS_LAMBDA_EXECUTION_ROLE }} \
          --timeout 180 \
          --memory-size 2048 \ 
          --region ap-northeast-2

    - name: Wait for Lambda to be Active
      run: |
        sleep 5
        LAMBDA_NAME=$(basename $TARGET_DIR)
        TEST_LAMBDA_NAME="test-extract-$LAMBDA_NAME"
        while [[ "$(aws lambda get-function-configuration --function-name "$TEST_LAMBDA_NAME" --query 'State' --output text)" == "Pending" ]]; do
          echo "Lambda is still pending... waiting 3 seconds"
          sleep 3
        done
        echo "Lambda is ready!"
        sleep 5

    - name: Invoke Test Lambda
      run: |
        LAMBDA_NAME=$(basename $TARGET_DIR)
        TEST_LAMBDA_NAME="test-extract-$LAMBDA_NAME"
        echo "Invoking Test Lambda: $TEST_LAMBDA_NAME"
        aws lambda invoke --function-name $TEST_LAMBDA_NAME \
          --cli-binary-format raw-in-base64-out \
          --payload '{ "car_id": "test-github", "keywords": ["캐스퍼"], "date":"2025-02-10", "batch":3,"start_datetime": "2025-02-08T00:00:00", "end_datetime": "2025-02-11T00:00:00", "bucket": "${{ secrets.AWS_TEST_BUCKET_NAME }}"}' \
          response.json \
          --region ap-northeast-2 
        cat response.json       
        
        # JSON에서 statusCode 추출
        STATUS_CODE=$(jq '.statusCode' response.json)

        # statusCode가 200이 아닌 경우 실패로 처리
        if [ "$STATUS_CODE" -ne 200 ]; then
          echo "Lambda invocation failed with statusCode: $STATUS_CODE"
          exit 1
        fi

